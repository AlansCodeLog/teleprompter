"use strict";

var _electron = require("electron");

var _fs = _interopRequireDefault(require("fs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const {
  dialog
} = _electron.remote;

function calculate_counters(editor, counter_all, wpm, minutes) {
  return function handler(e) {
    let word_count = editor.value.split(/\s+/gm).length;
    counter_all.textContent = "".concat(word_count);
    let wpm_val = parseInt(wpm.value, 10);
    let read_time;

    if (wpm_val == undefined) {
      read_time = "Invalid Input";
    } else {
      read_time = "".concat(ms_to_time(Math.round(word_count / wpm_val * 60 * 1000)));
    }

    minutes.textContent = read_time;
  };
}

document.addEventListener('DOMContentLoaded', () => {
  let wrapper = document.querySelector(".wrapper");
  let editor = document.querySelector(".editor");
  let menu = document.querySelector(".menu");
  let topbar = document.querySelector(".topbar"); // let counter_part = document.querySelector(".counter-part")! as HTMLDivElement

  let counter_all = document.querySelector(".counter-all");
  let wpm = document.querySelector(".wpm");
  let minutes = document.querySelector(".minutes");
  let time = document.querySelector(".time");
  let time_val = document.querySelector(".time-val");
  let button_open = document.querySelector(".open");
  let button_save = document.querySelector(".save");
  let button_save_as = document.querySelector(".save-as");
  let opacity_more = document.querySelector(".opacity-more");
  let opacity_less = document.querySelector(".opacity-less");
  let transparent_background = document.querySelector(".transparent-background");
  menu.addEventListener("click", () => {
    let showing = topbar.style.display == "flex";

    if (showing) {
      topbar.style.display = "none";
      showing = false;
    } else {
      topbar.style.display = "flex";
      showing = true;
    }
  });

  const flex_handler = () => {
    let flexed = flex_detector(topbar, "row");

    if (flexed) {
      topbar.classList.add("wrapped");
    } else {
      topbar.classList.remove("wrapped");
    }
  };

  window.addEventListener("resize", flex_handler);
  flex_handler();
  let file;
  button_open.addEventListener("click", e => {
    dialog.showOpenDialog({
      properties: ['openFile']
    }, function (filename) {
      if (filename) {
        file = filename[0];

        _fs.default.readFile(file, (err, contents) => {
          editor.value = contents.toString();
        });
      }
    });
  });
  button_save.addEventListener("click", e => {
    _fs.default.writeFile(file, editor.value, err => {
      if (err) {
        console.log(err);
      }
    });
  });
  button_save_as.addEventListener("click", e => {
    dialog.showSaveDialog({
      defaultPath: file
    }, function (filename) {
      if (filename) {
        file = filename;

        _fs.default.writeFile(file, editor.value, err => {
          console.log(err);
        });
      }
    });
  });
  const handler = calculate_counters(editor, counter_all, wpm, minutes);
  editor.addEventListener("input", handler);
  let timer;
  let interval;
  time.addEventListener("click", () => {
    if (timer) {
      clearInterval(interval);
      time.textContent = "⏱️";
      timer = undefined;
    } else {
      time.textContent = "🛑";
      timer = new Date();
      time_val.textContent = "00:00:00";
      interval = setInterval(() => {
        let finish = new Date(); //@ts-ignore - Dates can be compared damn it.

        let elapsed = ms_to_time(finish - timer);
        time_val.textContent = "".concat(elapsed);
        console.log(elapsed);
      }, 100);
    }
  });

  const opacity_less_handler = () => {
    let el_opacity = getComputedStyle(wrapper).opacity;
    let opacity = el_opacity === null || el_opacity === "" ? 0 : parseFloat(el_opacity);
    wrapper.style.opacity = opacity - 0.1 >= 0 ? "".concat(opacity - 0.1) : "0";
  };

  opacity_less.addEventListener("click", opacity_less_handler);

  const opacity_more_handler = () => {
    let el_opacity = getComputedStyle(wrapper).opacity;
    let opacity = el_opacity === null || el_opacity === "" ? 0 : parseFloat(el_opacity);
    wrapper.style.opacity = opacity + 0.1 <= 1 ? "".concat(opacity + 0.1) : "1";
  };

  opacity_more.addEventListener("click", opacity_more_handler);
  let bg_state = 0.5;

  const bg_state_toggler = () => {
    if (bg_state == 0.5) {
      wrapper.style.background = "rgba(0,0,0,1)";
      bg_state = 1;
    } else {
      wrapper.style.background = "rgba(0,0,0,0.5)";
      bg_state = 0.5;
    }
  };

  transparent_background.addEventListener("click", bg_state_toggler);
  window.addEventListener("keydown", e => {
    if (e.ctrlKey && e.altKey) {
      if (e.key == "-") {
        opacity_less_handler();
      } else if (e.key == "+" || e.key == "=") {
        opacity_more_handler();
      }
    }

    if (e.ctrlKey && !e.altKey && !e.shiftKey && e.key == "Tab") {
      bg_state_toggler();
    }
  });
});

function ms_to_time(ms) {
  let seconds = Math.floor(ms / 1000 % 60).toString();
  let minutes = Math.floor(ms / (1000 * 60) % 60).toString();
  let hours = Math.floor(ms / (1000 * 60 * 60) % 24).toString();
  return "".concat(hours.padStart(2, "0"), ":").concat(minutes.padStart(2, "0"), ":").concat(seconds.padStart(2, "0"));
}

function flex_detector(element) {
  let row_or_column = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "row";
  let dir = {
    pos: "y",
    w_or_h: "height"
  };

  if (row_or_column == "column") {
    dir = {
      pos: "x",
      w_or_h: "width"
    };
  }

  let el = element;
  let first = el.children[0].getBoundingClientRect();
  let last = el.children[el.children.length - 1].getBoundingClientRect(); // should work even if the flex items are different heights
  // only exceptions i think are if the element aligns itself below another element somehow

  if (first[dir.pos] + first[dir.w_or_h] < last[dir.pos]) {
    return true;
  } else {
    return false;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,